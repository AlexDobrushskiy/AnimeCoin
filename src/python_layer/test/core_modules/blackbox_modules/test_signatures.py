import unittest
from unittest.mock import patch

from core_modules.blackbox_modules.crypto import get_Ed521
from core_modules.blackbox_modules import keys
from core_modules.blackbox_modules.signatures import pastel_id_write_signature_on_data_func, \
    pastel_id_verify_signature_with_public_key_func


class TestSignatures(unittest.TestCase):
    def setUp(self):
        self.input_data = b'THIS IS SOME TEST INPUT TEXT'
        self.Ed521 = get_Ed521()

        self.private_key = b'>\xe4\x9a\x9e{\xcfh&k+-\xea\x87\xf0\x04\xe7\xff>\xb6\x02V\xda\xfd\xe1\x91\xbf\xc993{\x07\x08\xaaw\x86\x1b\x00\rJD\xbb=9\xd9\xf5\xa7L\xa3\x8e\x9ck_>\xcc\x9fO\xc9\x86\x87\x9d&l\xdf%\xa1v\t|\xf5lNibtG\xd5\x96\xcd\x1f\x9aE\xdf\x1d$0\xeb\x13G\xd7\xde\xce\xfbD\xaf\x00zx\xfb\xa4v4\x9f\x14:B\x9a\xcd\xe7$\x89\xae2\x986a\x94\xcf\xac\x04e\xf8\xc1\xb8\xd3&/\xeeL,\x9e\x05eh\xe7\t\xb5\x92\x06\xbe\x0b\xd9\x93@\xabT-\xdc\xa07\xb8\xa4\xff~\xba\x00\xa1Z\x9a9\xd2\x13\xc3\xc6\x15\xa9\x14a\x80\xab\x94o\x14\xf0\x9c\xce\xcb;\xc5\xcad\x12\x93 \x1eS\x03\xbd\xfd\x92\xbe0\x8a"W-\x08\x86b\x9e5`\x9at\x08\x9a\xe0w!\xf8\x12/\xbc\xc0wf\xe2\xd3\xda_h\xcf\xa1\xcdc6\x0b9\x10\x88>\xe7\xdd\xcc>Sn\xda\x07\xee\xc1\xff\xaed\xba\xb4\t\xda\xe8>"8\xf0O!\xcd#\xfc\xa4\xa6\x8c\xe6\xeai\x82\xbfW\xe30\x07R\x9d_\xd4Cm\xe6\xe4\xd2\xba\xa0\xc6P9\x1b\xf0\x96Sa\x87U\x99Y\xba\x19\xa9\xd0\xfe\xbe\x93\xc0\'7]x\xa7EP\x93qv\x83\x9bJ\xfdUQ0Pm:\x1b\x9d\x07\xc6\xe7\x93fp\xee\xe8r\x19k\xc5\xb7\xad\x10=\xdc\tp,|\x08\xefT\x93Q\xe9h\x8d\x0b\xbe\xb3\xaf:\xf2-\xb0\xa6\xe3\xbb&\xbd&O\xd2\xcb\xf8\xd5\\7\xedr\x82&.q\xb5\xe2\x0e{\xa0\xc2\x9a\xd4*\x17\xa3\r\xe3\x1abzXqb\x10\x068\xa8\x83\xb2\xa6\xc9\x9e\x93;\xf3f\t\x0f\xff\xff\xcb\xfeo@\xb5a\x0f\xe8\xe7:b*\x98\xe5\xdb\xf2\xde\xe8j\xbc\x10\x9cf\xc6P2\x04u\x91\xbe9\xe1d\x1e}\x92\xd2\x0f\xcb\xdb\x93D\xf2\x1f\xa3\xf4_F8\xa0\xdd\x006\x89\x88\x10\xa6N\x84\x0c-f\xec\x0b\xa4\xbd\xee\xcb\xa8\xcf\xf1#|\xc86\xa5)\xc9\'\xd2\x05JK\xa4$\x84\xdb\xd3\x06\x06NSe\xba\x90\x9a\xa4.8\x9b\xb2.\x9bK\xb4\xa4\x01\x17\x02\xa8\xc3V&\xf8\x07\x8f\xce\x9di\x02\x8e\xc6\x02\xf1\x8e\n\xd4\x90\xfd\xe1t\x05\x17n\xe4\x93\xf2\x13r}o\xf4\xca\x11Pf\x8a\x85\x1e\xd1\xcd\x96IO\xf1\xdaem\xff4\xf20\x9f*\xa6\x98\xd6\xfb!\x92\xc0\x07\x99\xd9\x03\x17\xac\x13\x81!u\xeeu\x07\x87\x04\x9b\x16\xa8\xa5\xdd\xce\xe3~\x80L\xf6U\xd6\xd3\x94\xffs>\xc3\xcb\xf9\xf9F\x95\xf6\xad.\x11\xab\xfafmOK\x1aW\x9c\xf5Hoj\xce\xf3\xb2\xc7\xf0\n\xb9\x86`\x83E\xe1\xd8XU\x96FG\xc4fVJ\xf4\xa7Z\xec\x1c\x9dP\xc6\xb3\x8d\xc1\xb5\xb3>\x9c\x03\xa9\x0f\x98\xcb\x14\xb5\x077\xaf^V\xe6\xef\xfe\x9eci\x07:\xc8\x01G^\xb2p\x81\xd6\xfa\x12d\x80\xbc\x98\x8d\xf7DF\xc4\x1c\xe0\x97E\x9d\xc2\xe0\xb5E\xb0)\xf7\xfa\xd6\xfb6\rs\xcaw\x96\xfc\xc0\xb47\x04$\xf7\xe3\xd8\x10\xc4\x0eB\xbe\xc1gr\xbc\x11a-\xda\xa6\xe0\xc4t\xb2\'\xeef\x89g\xa1\x00\x15A\xa9\xb6\xd2\xce\x97n\xa4\xce^\x14\xbbf8\xb8`\x08\x03\xd7Eu\x9d\xe00\x8f\x0br\x1f|)u!\xec\xe0\x98\xbb|\'\xf2p\xa7\x00L\xaf\xe8\x8b?\x0bf0\xc6\xf6\xd5X\x85\xae\x82\x91f"B\xa5\x8e\x1f>9\xe5m\xc4\xa7\xc0 FR^L\xeeFS{?\xe0U\xf4\x7f\x93\x13\x11\x0eXc7f\xa3E\x0bO&4\xc4\x8a~k\x83e\xfbvk\x147\x8c\xddo\xae\xae\x8a\xc7o\xc4K*\x89\xe8\n*\xa3\x81:U\xe5\xb3z\xe2\x08\\m\xbb\xd2m\x94\x96\xde\x8a8\r\x036\xf9\xe1\xf6x\\\x81\xfa\x83F\x89\xcf\n\x85\x1e\xd0\xc1\xb5\x12\x0e2\xd1\xd8\xbd<R\xde\xf5a\xd9x\xbcD\xc9\xab\x17\xf8q\xd0\xf4sG\xe6\x1a\xeb\x8f\xc5\xa2\xcc8\xee\xb6\xed\x0bK\xcfUbj\xaf1cJN7\xe8w\xac\x8d\x86#\xd2\x9c\x7fa^\xcd8\xb3\xd9\xfdK\xddZ\x96Uf`l\t\xfdP^\xc3\xfa\xcd$\xccJ,\r%\xb4\x80\x8cl\xb6\xce!\r>8\x17X\x07\x88\xb2\xb1\xc9Rx\xbd\x90'
        self.public_key = b"\xeb\xc3\x00\x9c\x80\xb1_\xac\xefa\xc9\xde\x14\x97*\xe0\x9e'R\xf5\x1d$\xd1 \xd9\x05`U\xac\x92\xef\xad\xb1cV+\xc5\xed\xc7\xa4\x11\xf5M1\x84\xbc\xfe\x1f\x8a_0\xd4\x9cy\xe7-\x8eT8Z\x16T\x9f\xddN\x81"

    def test_generated_key(self):
        with patch('nacl.utils.random', return_value=b'oofioCh7da2Eet6gi9owohB2do9ohsup'):
            privkey, pubkey = keys.id_keypair_generation_func()

        signature = pastel_id_write_signature_on_data_func(self.input_data, privkey, pubkey)
        verified = pastel_id_verify_signature_with_public_key_func(self.input_data, signature, pubkey)
        self.assertTrue(verified)

    def test_signatures(self):
        signature = pastel_id_write_signature_on_data_func(self.input_data, self.private_key, self.public_key)
        verified = pastel_id_verify_signature_with_public_key_func(self.input_data, signature, self.public_key)
        self.assertTrue(verified)

    def test_bad_types(self):
        with self.assertRaises(TypeError):
            pastel_id_write_signature_on_data_func(b'', b'', None)
        with self.assertRaises(TypeError):
            pastel_id_verify_signature_with_public_key_func(None, b'', b'')
