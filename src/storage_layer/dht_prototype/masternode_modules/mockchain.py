import os
import random
from collections import OrderedDict


class BlockChain:
    def __init__(self):
        self.__pubkeys = OrderedDict()
        self.__chain = OrderedDict()
        self.__masternodes = OrderedDict()
        self.__fingerprints = OrderedDict()

    def store_data_in_utxo(self, input_data):
        txid = os.urandom(32)
        self.__chain[txid] = input_data
        return txid

    def retrieve_data_from_utxo(self, txid):
        return self.__chain[txid]

    def get_id_for_pubkey(self, pubkey):
        return self.__pubkeys[pubkey]

    def register_pubkey(self, pubkey):
        userid = os.urandom(32)
        self.__pubkeys[pubkey] = userid

    def register_masternode(self, pubkey, mn):
        self.__masternodes[pubkey] = mn

    def get_masternode(self, key):
        return self.__masternodes[key]

    def get_top_n_masternodes(self, number=3):
        ret = []
        for mn_key in random.sample(self.__masternodes.keys(), number):
            ret.append(mn_key)
        return ret

    def get_artwork(self, artid):
        #TODO: check mempool as well!
        return self.__chain.get(artid)

    def get_all_fingerprints(self):
        # TODO: check mempool as well!
        return self.__fingerprints.copy()

    def art_hash_not_on_chain_or_mempool(self, art_hash):
        raise NotImplementedError()
