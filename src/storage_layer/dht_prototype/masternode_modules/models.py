import base64
import msgpack


from .helpers import ensure_type, ensure_type_of_field
from .model_validators import ArtRegistrationRequestValidator, ArtActivationTicketValidator



class ArtTicket:
    def __init__(self):
        #### set by MN
        self.CREATION_DATE = None
        self.CURRENT_ANIMECOIN_BLOCK_NUMBER = None
        self.CURRENT_ANIMECOIN_BLOCK_HASH = None

        # artwork metadata
        self.ARTWORK_IMAGE_SIZE_IN_MB = None
        self.ARTWORK_METADATA_HASH = None
        self.ARTWORK_PREVIEW_HASH = None
        self.ARTWORK_METADATA_TICKET_ANIMECOIN_BLOCKCHAIN_STORAGE_TXID = None

        # fingerprints
        # TODO: MNs always sign with:
        #   o MN collateral address (RPC to DASH client)
        #   o animecoin ID (Ed521)

        self.NSFW_MODEL_FILE_HASH = None
        self.DUPE_FINGERPRINTING_MODEL_NAME_1_OF_5 = None
        self.DUPE_FINGERPRINTING_MODEL_NAME_2_OF_5 = None
        self.DUPE_FINGERPRINTING_MODEL_NAME_3_OF_5 = None
        self.DUPE_FINGERPRINTING_MODEL_NAME_4_OF_5 = None
        self.DUPE_FINGERPRINTING_MODEL_NAME_5_OF_5 = None

        # fees
        self.ANIMECOIN_MINING_DIFFICULTY_ADJUSTMENT_RATIO = None
        self.REQUIRED_REGISTRATION_FEE_IN_ANIMECOIN_TERMS_PRE_DIFFICULTY_ADJUSTMENT = None
        self.REQUIRED_REGISTRATION_FEE_IN_ANIMECOIN_TERMS_POST_DIFFICULTY_ADJUSTMENT = None
        self.ARTISTS_FORFEITABLE_DEPOSIT_IN_ANIMECOIN_TERMS_TO_INITIATE_REGISTRATION = None

        # signatures
        self.REGISTERING_MASTERNODE_ANIMECOIN_COLLATERAL_BLOCKCHAIN_ADDRESS = None
        self.REGISTERING_MASTERNODE_ANIMECOIN_ID_PUBLIC_KEY = None
        self.REGISTERING_MASTERNODE_IP_ADDRESS = None
        self.REGISTERING_MASTERNODE_COLLATERAL_SIGNATURE_ON_COMBINED_ARTWORK_IMAGE_AND_METADATA_STRING = None
        self.REGISTERING_MASTERNODE_ANIMECOIN_ID_SIGNATURE_ON_COMBINED_ARTWORK_IMAGE_AND_METADATA_STRING = None
        self.REGISTERING_MASTERNODE_PROCESSED_DATE_TIME = None

        self.CONFIRMING_MN_1_ANIMECOIN_COLLATERAL_BLOCKCHAIN_ADDRESS = None
        self.CONFIRMING_MN_1_ANIMECOIN_ID_PUBLIC_KEY = None
        self.CONFIRMING_MN_1_IP_ADDRESS = None
        self.CONFIRMING_MN_1_COLLATERAL_SIGNATURE_ON_COMBINED_IMAGE_AND_METADATA_STRING = None
        self.CONFIRMING_MN_1_ANIMECOIN_ID_SIGNATURE_ON_COMBINED_IMAGE_AND_METADATA_STRING = None
        self.CONFIRMING_MN_1_PROCESSED_DATE_TIME = None

        self.CONFIRMING_MN_2_ANIMECOIN_COLLATERAL_BLOCKCHAIN_ADDRESS = None
        self.CONFIRMING_MN_2_ANIMECOIN_ID_PUBLIC_KEY = None
        self.CONFIRMING_MN_2_IP_ADDRESS = None
        self.CONFIRMING_MN_2_COLLATERAL_SIGNATURE_ON_COMBINED_IMAGE_AND_METADATA_STRING = None
        self.CONFIRMING_MN_2_ANIMECOIN_ID_SIGNATURE_ON_COMBINED_IMAGE_AND_METADATA_STRING = None
        self.CONFIRMING_MN_2_PROCESSED_DATE_TIME = None
        ### END

        ### set by ARTIST
        # TODO: filled by ArtRegistrationRequest
        ### END

    def to_dict(self):
        return self.__dict__.copy()


class ArtRegistrationRequest:
    def __init__(self, datadict):
        validated = ArtRegistrationRequestValidator(datadict)
        for k, v in validated.get_dict().items():
            setattr(self, k, v)

    def __str__(self):
        ret = ["\n##### REGISTRATION TICKET #####"]
        for k, v in self.__dict__.items():
            ret.append("%s: %s" % (k, v))
        return "\n".join(ret)

    def get_dict(self):
        return self.__dict__.copy()


class ArtActivationTicket:
    def __init__(self, datadict):
        validated = ArtActivationTicketValidator(datadict)
        for k, v in validated.get_dict().items():
            setattr(self, k, v)

    def __str__(self):
        ret = ["\n##### ACTIVATION TICKET #####"]
        for k, v in self.__dict__.items():
            ret.append("%s: %s" % (k, v))
        return "\n".join(ret)

    def get_dict(self):
        return self.__dict__.copy()


def serialize_ticket(ticket):
    serialized = msgpack.packb(ticket.get_dict(), use_bin_type=True)
    return serialized


def load_ticket(data):
    ticket = msgpack.unpackb(data, raw=False)
    ret = {}
    for k, v in ticket.items():
        ret[k] = v
    return ret


def serialize_signatures(signatures):
    binary = []
    for pubkey, sig in signatures:
        bpubkey, bsig = base64.b64decode(pubkey), base64.b64decode(sig)
        print("pubkey length:", len(bpubkey))
        print("sig length:", len(bsig))
        binary.append((bpubkey, bsig))
    serialized = msgpack.packb(binary, use_bin_type=True)
    return serialized


def load_signatures(data):
    binary = msgpack.unpackb(data, raw=False)
    signatures = []
    for bpubkey, bsig in binary:
        signatures.append((base64.b64encode(bpubkey), base64.b64encode(bsig)))
    return signatures
