class BytesField:
    def __init__(self, minsize, maxsize):
        self.minsize = minsize
        self.maxsize = maxsize

    def validate(self, value):
        if type(value) != bytes:
            raise TypeError("value is not bytes, was: %s" % type(value))

        if len(value) < self.minsize or len(value) > self.maxsize:
            raise ValueError("value is out of bound (value < minsize or value > maxsize), was: %s" % len(value))


class StringField:
    def __init__(self, minsize, maxsize):
        self.minsize = minsize
        self.maxsize = maxsize

    def validate(self, value):
        if type(value) != str:
            raise TypeError("value is not str, was: %s" % type(value))

        if len(value) < self.minsize or len(value) > self.maxsize:
            raise ValueError("value is out of bound (value < minsize or value > maxsize), was: %s" % len(value))


class IntegerField:
    def __init__(self, minsize, maxsize):
        self.minsize = minsize
        self.maxsize = maxsize

    def validate(self, value):
        if type(value) != int:
            raise TypeError("value is not int, was: %s" % type(value))

        if value < self.minsize or value > self.maxsize:
            raise ValueError("value is out of bound (value < minsize or value > maxsize), was: %s" % value)


class PubKeyField(BytesField):
    def __init__(self, minsize, maxsize):
        super().__init__(minsize, maxsize)

    def validate(self, value):
        # TODO: validate that this is an actual key
        super().validate(value)


# NOTE: Version is not included in here as we can rely on the blockchain for versioning
ARTREGISTRATION_KEYS = {
        "ARTIST_PUBKEY": PubKeyField(minsize=0, maxsize=132),
        "ARTWORK_TITLE": StringField(minsize=0, maxsize=120),
        "ARTIST_NAME": StringField(minsize=0, maxsize=120),
        "ARTWORK_SERIES_NAME": StringField(minsize=0, maxsize=120),
        "ARTWORK_CREATION_VIDEO_YOUTUBE_URL": StringField(minsize=0, maxsize=120),
        "ARTIST_WEBSITE": StringField(minsize=0, maxsize=120),
        "ARTIST_WRITTEN_STATEMENT": StringField(minsize=0, maxsize=120),
        "ARTWORK_KEYWORD_SET": StringField(minsize=0, maxsize=120),
        "TOTAL_COPIES": IntegerField(minsize=0, maxsize=120),
        "IMAGE_HASH": BytesField(minsize=64, maxsize=64),
        "IMAGE_FINGERPRINT_HASH": BytesField(minsize=64, maxsize=64),
    }


class ArtRegistrationRequestValidator:
    def __init__(self, datadict):
        self.__validated = {}

        # validate all keys for this version
        a, b = set(datadict.keys()), set(ARTREGISTRATION_KEYS.keys())
        if len(a - b) + len(b - a) > 0:
            raise KeyError("Keys don't match %s != %s" % (a, b))

        for k, v in datadict.items():
            validator = ARTREGISTRATION_KEYS[k]
            validator.validate(v)
            self.__validated[k] = v

    def get_dict(self):
        return self.__validated.copy()
