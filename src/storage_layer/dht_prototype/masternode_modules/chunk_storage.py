import os
import re

# This regular expression protects us against maliciously named files,
# since storing a file named ../../../../any/name/here might cause problems.
# This re matches everything that is not a hexadecimal character.
valid_filename_re = r'[^0-9a-f]'


class ChunkStorage:
    def __init__(self, basedir, mode=0o0700):
        self.__basedir = basedir
        self.__mode = mode

    def __derive_fs_file_name(self, chunkname):
        if re.search(valid_filename_re, chunkname) is not None:
            raise ValueError("Invalid characters in chunkname: %s", chunkname)

        if len(chunkname) < 16:
            raise ValueError("Chunkname too short, should be at least 16 characters!")

        # max 4096 level 1 dirs, containing max 4096 level2 dirs, containing files
        dir1 = chunkname[0:3]
        dir2 = chunkname[3:6]
        filename = chunkname

        directory_name = os.path.join(self.__basedir, dir1, dir2)
        fs_file_name = os.path.join(self.__basedir, dir1, dir2, filename)
        return directory_name, fs_file_name

    def get(self, chunkname):
        dirname, filename = self.__derive_fs_file_name(chunkname)

        with open(filename, "rb") as f:
            return f.read()

    def put(self, chunkname, data):
        dirname, filename = self.__derive_fs_file_name(chunkname)

        os.makedirs(dirname, mode=self.__mode)

        with open(filename, "wb") as f:
            f.write(data)

    def delete(self, chunkname):
        dirname, filename = self.__derive_fs_file_name(chunkname)

        os.unlink(filename)

    def exists(self, chunkname):
        dirname, filename = self.__derive_fs_file_name(chunkname)

        try:
            os.stat(filename)
        except FileNotFoundError:
            return False
        else:
            return True
